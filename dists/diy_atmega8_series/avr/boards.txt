################################################################################
#
# Written by James Sleeman, http://sparks.gogo.co.nz/
#
#  ATMEGA8 Series Pin Compatible Microcontrollers
#
#   ATmega8,   ATmega8A,
#   ATmega88,  ATmega88A,  ATmega88P,  ATmega88PA, ATmega88PB
#   ATmega168, ATmega168A, ATmega168P, ATmega168PA, ATmega168PB
#   ATmega328, ATmega328P, ATmega328PB
#   ATmega48,  ATmega48A,  ATmega48P, ATmega48PA, ATmega48PB
#           
#  These microcontrollers are essentially pin compatible in a DIP 28 and TQFP 32
#  package, the differ mostly in memory (but not only).
#
# LOCK/UNLOCK BITS NOTES!  READ THIS BEFORE YOU GET CONFUSED!
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# avrdude masks out bits 6 and 7 of the lock bits when it READS
# them in (sets them zero), which means if you give it unmasked 
# lock bits (bits 6 and 7 = 1) then the write works fine but the 
# verification will fail, so always make sure you set those two
# bits to zero.
#
# For the ATMega*8 Series, here are the sequences which are important
#  to us...
#
#  Without Bootloader or with Tunable Bootloader;
#
#   00111111 (0x3F)  - No Locking
#   00111101 (0x3E)  - Write Lock
#   00111100 (0x3C)  - Read and Write Lock
#
# With Non-Tunable Bootloader*;
#
#   00001111 (0x0F)  - No Locking 
#   00001101 (0x0E)  - Write Lock
#   00001100 (0x0C)  - Read and Write Lock
#
# * With a bootloader the lockbits restrict LPM and SPL 
#   (Load / Store Program Memory) in the Bootloader Section
#
# NB: At present no locking is used for all the chips (Bootloader or not).
#     since we have size limited anyway (upload.maximum_size) I don't see this
#     as too big a deal, and if somebody burnt the lock bits then they must have
#     the capability to reburn the bootloader if they did ever upload a sketch
#     which was too big (or someother way mess up the bootloader section).
#
#     Leaving them unlocked means that we don't have to worry about if the
#     bootloader is tunable (needs to write into a byte in that section) or not
#     and the user can download the flash contents with avrdude.  If the user
#     wants to lock the chip, they can set the lock fuses themselves in avrdude
#     easily enough, we assume they have the knowledge to do so if they are
#     at the level of wanting to do so.
#  
# NOTE, UNLOCK IS PRETTY MUCH NONSENSE
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#  See Datasheet Page 283 of ATMega8 for example:
#  > The Lock Bits can only be erased to “1” with the 
#  > Chip Erase command.
#
# This applies to all the AVR series I have looked at (and
#  it makes sense to do it that way, the point of locking is 
#  to make it hard to get/change the code, if you could just 
#  unlock it, what would be the point).
#
# Since burning the bootloader is going to do a full erase 
# (-e option passed to avrdude) anyway, it's already 
# unlocked, so doing this "unlock bits" step is pointless
# as far as I can see, but whatever, the Arduino IDE 
# wants them, maybe some other chip than an AVR might need them
# one day?
#
################################################################################

menu.version    = Processor Version
menu.clock      = Processor Speed
menu.boot       = Use Bootloader
menu.lto        = Link Time Optimisation
menu.bodlevel   = Brown-out Detection Level
menu.advclk     = Override Clock Source
menu.advfrq     = Override Frequency

# The mega8 has a CKOPT fuse which increases drive strength to crystals
#  or enables some internal capacitors for low frequency crystal
#  and clock inputs.
menu.advckopt   = Override CKOPT

menu.advups     = Override Upload Speed

################################################################################
# ATMEGA8
#
# A note about CKOPT fuse on ATMega8
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#  If CKOPT is NOT programmed ( 1 ) then you are limited to 8MHz
#  If CKOPT is programmed ( 0 ) then power consumption is higher
#   but you can go up to 16MHz
#  
#  The safe way then is to always program CKOPT ( 0 )
#
#  BTW: Can somebody give a punch in the face to the person at Atmel 
#   who decided that "1" means unprogrammed and "0" means programmed.
#   Even if it's a hardware necessity, you could at least have hidden
#   it in avrdude or something.  Gah.
#
#
################################################################################
# {{{

atmega8_diy.name=ATmega8/A
atmega8_diy.build.mcu=atmega8
atmega8_diy.bootloader.low_fuses=0b{bootloader.bod_bits}{bootloader.clock_bits}
atmega8_diy.bootloader.bod_bits=11
atmega8_diy.bootloader.clock_bits=100100
atmega8_diy.bootloader.high_fuses=0b110{bootloader.ckopt_bit}1{bootloader.bootloader_bits}
atmega8_diy.bootloader.ckopt_bit=0
atmega8_diy.bootloader.bootloader_bits=111
atmega8_diy.bootloader.unlock_bits=0x3F
atmega8_diy.bootloader.lock_bits=0x3F
atmega8_diy.build.f_cpu=8000000L
atmega8_diy.upload.speed=57600
atmega8_diy.build.core=arduino:arduino
atmega8_diy.build.variant=arduino:standard
atmega8_diy.build.board=ATMEGA8_DIY
atmega8_diy.upload.tool=avrdude_noefuse
atmega8_diy.bootloader.tool=avrdude_noefuse

# Version Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega8_diy.menu.version.atmega8a = ATmega8A
atmega8_diy.menu.version.atmega8a.build.mcu = atmega8

atmega8_diy.menu.version.atmega8 = ATmega8
atmega8_diy.menu.version.atmega8.build.mcu = atmega8

# Bootloader Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega8_diy.menu.boot.optiboot=Yes (Normal Arduino Serial/USB Upload)
atmega8_diy.menu.boot.optiboot.upload.protocol=arduino
atmega8_diy.menu.boot.optiboot.upload.maximum_size=7680
atmega8_diy.menu.boot.optiboot.bootloader.bootloader_bits=100
atmega8_diy.menu.boot.optiboot.bootloader.file=optiboot_{build.mcu}_{build.f_cpu}_{upload.speed}.hex
atmega8_diy.menu.boot.optiboot.bootloader.noblink=notuner_optiboot_{build.mcu}_{build.f_cpu}_{upload.speed}.hex

atmega8_diy.menu.boot.none=No (ISP Programmer Upload)
atmega8_diy.menu.boot.none.upload.maximum_size=8192
atmega8_diy.menu.boot.none.bootloader.bootloader_bits=101
atmega8_diy.menu.boot.none.bootloader.tool=avrdude_nobootloader_noefuse

# Speed Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega8_diy.menu.clock.8MHz=8MHz Internal Oscillator
atmega8_diy.menu.clock.8MHz.build.f_cpu=8000000L
atmega8_diy.menu.clock.8MHz.upload.speed=38400
atmega8_diy.menu.clock.8MHz.bootloader.clock_bits=100100
atmega8_diy.menu.clock.8MHz.bootloader.ckopt_bit=1

atmega8_diy.menu.clock.16MHz=16MHz Crystal/Resonator
atmega8_diy.menu.clock.16MHz.build.f_cpu=16000000L
atmega8_diy.menu.clock.16MHz.bootloader.clock_bits=111111
atmega8_diy.menu.clock.16MHz.bootloader.ckopt_bit=0

atmega8_diy.menu.clock.12MHz=12MHz Crystal/Resonator
atmega8_diy.menu.clock.12MHz.build.f_cpu=12000000L
atmega8_diy.menu.clock.12MHz.bootloader.clock_bits=111111
atmega8_diy.menu.clock.12MHz.bootloader.ckopt_bit=0
atmega8_diy.menu.clock.12MHz.upload.speed=115200

atmega8_diy.menu.clock.4MHz=4MHz Internal Oscillator
atmega8_diy.menu.clock.4MHz.build.f_cpu=4000000L
atmega8_diy.menu.clock.4MHz.bootloader.clock_bits=100011
atmega8_diy.menu.clock.4MHz.bootloader.ckopt_bit=1
atmega8_diy.menu.clock.4MHz.upload.speed=38400

atmega8_diy.menu.clock.2MHz=2MHz Internal Oscillator
atmega8_diy.menu.clock.2MHz.build.f_cpu=2000000L
atmega8_diy.menu.clock.2MHz.bootloader.clock_bits=100010
atmega8_diy.menu.clock.2MHz.bootloader.ckopt_bit=1
atmega8_diy.menu.clock.2MHz.upload.speed=19200

atmega8_diy.menu.clock.1MHz=1MHz Internal Oscillator
atmega8_diy.menu.clock.1MHz.build.f_cpu=1000000L
atmega8_diy.menu.clock.1MHz.bootloader.clock_bits=100001
atmega8_diy.menu.clock.1MHz.bootloader.ckopt_bit=1
atmega8_diy.menu.clock.1MHz.upload.speed=9600


# Link Time Optimisation
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
atmega8_diy.menu.lto.enable=LTO Enabled
atmega8_diy.menu.lto.enable.ltocflags=-flto -fno-fat-lto-objects
atmega8_diy.menu.lto.enable.ltoelfflags=-g -flto -fuse-linker-plugin
atmega8_diy.menu.lto.enable.ltocppflags=-flto
atmega8_diy.menu.lto.enable.ltoarcmd=gcc-
atmega8_diy.menu.lto.disable=LTO Disabled
atmega8_diy.menu.lto.disable.ltocflags=
atmega8_diy.menu.lto.disable.ltoelfflags=
atmega8_diy.menu.lto.disable.ltocppflags=
atmega8_diy.menu.lto.disable.ltoarcmd=

# BOD Level Fuse Bits
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
atmega8_diy.menu.bodlevel.2v7=2.7v
atmega8_diy.menu.bodlevel.2v7.bootloader.bod_bits=10
atmega8_diy.menu.bodlevel.disabled=Disabled
atmega8_diy.menu.bodlevel.disabled.bootloader.bod_bits=11
atmega8_diy.menu.bodlevel.4v0=4.0v
atmega8_diy.menu.bodlevel.4v0.bootloader.bod_bits=00


# Override: Clock Source Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega8_diy.menu.advclk.auto=Default

atmega8_diy.menu.advclk.i8=Internal Oscillator 8 MHz
atmega8_diy.menu.advclk.i8.bootloader.clock_bits=100100
atmega8_diy.menu.advclk.i8.bootloader.ckopt_bit=1
atmega8_diy.menu.advclk.i8.build.f_cpu=8000000L

atmega8_diy.menu.advclk.i4=Internal Oscillator 4 MHz
atmega8_diy.menu.advclk.i4.bootloader.clock_bits=100011
atmega8_diy.menu.advclk.i4.bootloader.ckopt_bit=1
atmega8_diy.menu.advclk.i4.build.f_cpu=4000000L

atmega8_diy.menu.advclk.i3=Internal Oscillator 2 MHz
atmega8_diy.menu.advclk.i3.bootloader.clock_bits=100010
atmega8_diy.menu.advclk.i3.bootloader.ckopt_bit=1
atmega8_diy.menu.advclk.i3.build.f_cpu=2000000L

atmega8_diy.menu.advclk.i1=Internal Oscillator 1 MHz
atmega8_diy.menu.advclk.i1.bootloader.clock_bits=100001
atmega8_diy.menu.advclk.i1.bootloader.ckopt_bit=1
atmega8_diy.menu.advclk.i1.build.f_cpu=1000000L

atmega8_diy.menu.advclk.xlf=Low Frequency Crystal/Resonator
atmega8_diy.menu.advclk.xlf.bootloader.clock_bits=101001
atmega8_diy.menu.advclk.xlf.bootloader.ckopt_bit=1

atmega8_diy.menu.advclk.xfs=Full Swing Crystal/Resonator 1+ MHz
atmega8_diy.menu.advclk.xfs.bootloader.clock_bits=111111
atmega8_diy.menu.advclk.xfs.bootloader.ckopt_bit=0

atmega8_diy.menu.advclk.x400=Crystal/Resonator 400-900 kHz
atmega8_diy.menu.advclk.x400.bootloader.clock_bits=111011
atmega8_diy.menu.advclk.x400.bootloader.ckopt_bit=1

atmega8_diy.menu.advclk.x900=Crystal/Resonator 900 kHz - 3 MHz
atmega8_diy.menu.advclk.x900.bootloader.clock_bits=111101
atmega8_diy.menu.advclk.x900.bootloader.ckopt_bit=1

atmega8_diy.menu.advclk.x3=Crystal/Resonator 3-8 MHz
atmega8_diy.menu.advclk.x3.bootloader.clock_bits=111111
atmega8_diy.menu.advclk.x3.bootloader.ckopt_bit=1

atmega8_diy.menu.advclk.x8=Crystal/Resonator 8+ MHz 
atmega8_diy.menu.advclk.x8.bootloader.clock_bits=111111
atmega8_diy.menu.advclk.x8.bootloader.ckopt_bit=0

atmega8_diy.menu.advclk.xc=External Clock (TCXO, OCXO...)
atmega8_diy.menu.advclk.xc.bootloader.clock_bits=100000
atmega8_diy.menu.advclk.xc.bootloader.ckopt_bit=1

atmega8_diy.menu.advclk.xrclf=External RC Oscillator <= 900 kHz
atmega8_diy.menu.advclk.xrclf.bootloader.clock_bits=100101
atmega8_diy.menu.advclk.xrclf.bootloader.ckopt_bit=1

atmega8_diy.menu.advclk.xrc900=External RC Oscillator 900 kHz - 3 MHz
atmega8_diy.menu.advclk.xrc900.bootloader.clock_bits=100110
atmega8_diy.menu.advclk.xrc900.bootloader.ckopt_bit=1

atmega8_diy.menu.advclk.xrc3=External RC Oscillator 3 MHz - 8 MHz
atmega8_diy.menu.advclk.xrc3.bootloader.clock_bits=100111
atmega8_diy.menu.advclk.xrc3.bootloader.ckopt_bit=1

atmega8_diy.menu.advclk.xrc8=External RC Oscillator 8 MHz - 12 MHz
atmega8_diy.menu.advclk.xrc8.bootloader.clock_bits=101000
atmega8_diy.menu.advclk.xrc8.bootloader.ckopt_bit=1


# Override: Frequency Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega8_diy.menu.advfrq.auto=Default

atmega8_diy.menu.advfrq.32k768=32.768 kHz
atmega8_diy.menu.advfrq.32k768.build.f_cpu=32768L
atmega8_diy.menu.advfrq.32k768.upload.speed=150

atmega8_diy.menu.advfrq.128k=128 kHz
atmega8_diy.menu.advfrq.128k.build.f_cpu=128000L
atmega8_diy.menu.advfrq.128k.upload.speed=300

atmega8_diy.menu.advfrq.1M=1 MHz
atmega8_diy.menu.advfrq.1M.build.f_cpu=1000000L
atmega8_diy.menu.advfrq.1M.upload.speed=9600

atmega8_diy.menu.advfrq.2M=2 MHz
atmega8_diy.menu.advfrq.2M.build.f_cpu=2000000L
atmega8_diy.menu.advfrq.2M.upload.speed=19200

atmega8_diy.menu.advfrq.4M=4 MHz
atmega8_diy.menu.advfrq.4M.build.f_cpu=4000000L
atmega8_diy.menu.advfrq.4M.upload.speed=38400

atmega8_diy.menu.advfrq.4M608=4.608 MHz
atmega8_diy.menu.advfrq.4M608.build.f_cpu=4608000L
atmega8_diy.menu.advfrq.4M608.upload.speed=115200

atmega8_diy.menu.advfrq.4M8=4.8 MHz
atmega8_diy.menu.advfrq.4M8.build.f_cpu=4800000L
atmega8_diy.menu.advfrq.4M8.upload.speed=19200

atmega8_diy.menu.advfrq.6M=6 MHz
atmega8_diy.menu.advfrq.6M.build.f_cpu=6000000L
atmega8_diy.menu.advfrq.6M.upload.speed=57600

atmega8_diy.menu.advfrq.6M4=6.4 MHz
atmega8_diy.menu.advfrq.6M4.build.f_cpu=6400000L
atmega8_diy.menu.advfrq.6M4.upload.speed=115200

atmega8_diy.menu.advfrq.8M=8 MHz
atmega8_diy.menu.advfrq.8M.build.f_cpu=8000000L
atmega8_diy.menu.advfrq.8M.upload.speed=38400

atmega8_diy.menu.advfrq.9M6=9.6 MHz
atmega8_diy.menu.advfrq.9M6.build.f_cpu=9600000L
atmega8_diy.menu.advfrq.9M6.upload.speed=57600

atmega8_diy.menu.advfrq.10M=10 MHz
atmega8_diy.menu.advfrq.10M.build.f_cpu=10000000L
atmega8_diy.menu.advfrq.10M.upload.speed=115200

atmega8_diy.menu.advfrq.12M=12 MHz
atmega8_diy.menu.advfrq.12M.build.f_cpu=12000000L
atmega8_diy.menu.advfrq.12M.upload.speed=115200

atmega8_diy.menu.advfrq.12M8=12.8 MHz
atmega8_diy.menu.advfrq.12M8.build.f_cpu=12800000L
atmega8_diy.menu.advfrq.12M8.upload.speed=115200

atmega8_diy.menu.advfrq.15M36=15.36 MHz
atmega8_diy.menu.advfrq.15M36.build.f_cpu=15360000L
atmega8_diy.menu.advfrq.15M36.upload.speed=57600

atmega8_diy.menu.advfrq.16M=16 MHz
atmega8_diy.menu.advfrq.16M.build.f_cpu=16000000L
atmega8_diy.menu.advfrq.16M.upload.speed=57600

atmega8_diy.menu.advfrq.19M2=19.2 MHz
atmega8_diy.menu.advfrq.19M2.build.f_cpu=19200000L
atmega8_diy.menu.advfrq.19M2.upload.speed=115200

atmega8_diy.menu.advfrq.20M=20 MHz
atmega8_diy.menu.advfrq.20M.build.f_cpu=20000000L
atmega8_diy.menu.advfrq.20M.upload.speed=115200

atmega8_diy.menu.advfrq.24M=24 MHz
atmega8_diy.menu.advfrq.24M.build.f_cpu=24000000L
atmega8_diy.menu.advfrq.24M.upload.speed=115200

# Override: Upload Speed Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega8_diy.menu.advups.auto=Default

atmega8_diy.menu.advups.115200=115200
atmega8_diy.menu.advups.115200.upload.speed=115200

atmega8_diy.menu.advups.57600=57600
atmega8_diy.menu.advups.57600.upload.speed=57600

atmega8_diy.menu.advups.38400=38400
atmega8_diy.menu.advups.38400.upload.speed=38400

atmega8_diy.menu.advups.19200=19200
atmega8_diy.menu.advups.19200.upload.speed=19200

atmega8_diy.menu.advups.9600=9600
atmega8_diy.menu.advups.9600.upload.speed=9600

atmega8_diy.menu.advups.2400=2400
atmega8_diy.menu.advups.2400.upload.speed=2400

atmega8_diy.menu.advups.1200=1200
atmega8_diy.menu.advups.1200.upload.speed=1200

atmega8_diy.menu.advups.300=300
atmega8_diy.menu.advups.300.upload.speed=300

atmega8_diy.menu.advups.150=150
atmega8_diy.menu.advups.150.upload.speed=150


# Override: CKOPT Fuse
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega8_diy.menu.advckopt.auto=Default

atmega8_diy.menu.advckopt.programmed=CKOPT = 0
atmega8_diy.menu.advckopt.programmed.bootloader.ckopt_bit=0

atmega8_diy.menu.advckopt.unprogrammed=CKOPT = 1
atmega8_diy.menu.advckopt.unprogrammed.bootloader.ckopt_bit=1

# }}}



################################################################################
# ATMEGA48p
#
# The ATMega48p has a small problem in the Arduino 1.0.5 because it's included 
# avrdude doesn't support it, and will report an incorrect signature or unknown
# device type.  1.6.x is fine.
#
# To fix this, edit your avrdude.conf, duplicate the section for the ATMega48 
# and change the duplicated section such that:
#
#   id = "m48p";
#   desc = "ATmega48P";
#   signature = 0x1e 0x92 0x0a;
#
# The 48 does not have a separate boot section of memory, so this means that
# optiboot uses a virtual boot method, this has a couple effects, firstly
# it takes more flash for the boot process, secondly it sacrifices the SPM_RDY
# interrupt vector, and thirdly it means that the lock bits 
# are just the simple set as with no bootloader
#
################################################################################
# {{{

atmega48p_diy.name=ATmega48/A/P/PA/PB
atmega48p_diy.bootloader.low_fuses=0xE2
atmega48p_diy.bootloader.high_fuses=0b11011{bootloader.bod_bits}
atmega48p_diy.bootloader.bod_bits=101
atmega48p_diy.bootloader.extended_fuses=0x00
atmega48p_diy.bootloader.unlock_bits=0x3F
atmega48p_diy.bootloader.lock_bits=0x3F
atmega48p_diy.build.mcu=atmega48p
atmega48p_diy.build.f_cpu=8000000L
atmega48p_diy.upload.speed=57600
atmega48p_diy.build.core=arduino:arduino
atmega48p_diy.build.variant=arduino:standard
atmega48p_diy.build.board=ATMEGA48_DIY
atmega48p_diy.upload.tool=arduino:avrdude
atmega48p_diy.bootloader.tool=arduino:avrdude

# Version Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega48p_diy.menu.version.atmega48pa = Atmega48PA
atmega48p_diy.menu.version.atmega48pa.build.mcu = atmega48p


atmega48p_diy.menu.version.atmega48p = Atmega48P
atmega48p_diy.menu.version.atmega48p.build.mcu = atmega48p

atmega48p_diy.menu.version.atmega48pb = Atmega48PB
atmega48p_diy.menu.version.atmega48pb.build.mcu = atmega48p

atmega48p_diy.menu.version.atmega48a = Atmega48A
atmega48p_diy.menu.version.atmega48a.build.mcu = atmega48

atmega48p_diy.menu.version.atmega48  = ATmega48
atmega48p_diy.menu.version.atmega48.build.mcu = atmega48


# Bootloader Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega48p_diy.menu.boot.optiboot=Yes (Normal Arduino Serial/USB Upload)
atmega48p_diy.menu.boot.optiboot.upload.protocol=arduino
atmega48p_diy.menu.boot.optiboot.upload.maximum_size=3538
atmega48p_diy.menu.boot.optiboot.bootloader.high_fuses=0xDD
atmega48p_diy.menu.boot.optiboot.bootloader.file=optiboot_{build.mcu}_{build.f_cpu}_{upload.speed}.hex
atmega48p_diy.menu.boot.optiboot.bootloader.noblink=notuner_optiboot_{build.mcu}_{build.f_cpu}_{upload.speed}.hex

atmega48p_diy.menu.boot.optiboot_notuner=Yes, Without Tuner
atmega48p_diy.menu.boot.optiboot_notuner.upload.protocol=arduino
atmega48p_diy.menu.boot.optiboot_notuner.upload.maximum_size=3554
atmega48p_diy.menu.boot.optiboot_notuner.bootloader.high_fuses=0xDD
atmega48p_diy.menu.boot.optiboot_notuner.bootloader.file=notuner_optiboot_{build.mcu}_{build.f_cpu}_{upload.speed}.hex

atmega48p_diy.menu.boot.none=No (ISP Programmer Upload)
atmega48p_diy.menu.boot.none.upload.maximum_size=4096
atmega48p_diy.menu.boot.none.bootloader.high_fuses=0xDD
atmega48p_diy.menu.boot.none.upload.tool=arduino:avrdude
atmega48p_diy.menu.boot.none.bootloader.tool=avrdude_nobootloader


# Speed Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega48p_diy.menu.clock.8MHz=8MHz Internal Oscillator
atmega48p_diy.menu.clock.8MHz.build.f_cpu=8000000L
atmega48p_diy.menu.clock.8MHz.upload.speed=38400
atmega48p_diy.menu.clock.8MHz.bootloader.low_fuses=0xE2

atmega48p_diy.menu.clock.20MHz=20MHz Crystal/Resonator
atmega48p_diy.menu.clock.20MHz.build.f_cpu=20000000L
atmega48p_diy.menu.clock.20MHz.bootloader.low_fuses=0xFF

atmega48p_diy.menu.clock.16MHz=16MHz Crystal/Resonator
atmega48p_diy.menu.clock.16MHz.build.f_cpu=16000000L
atmega48p_diy.menu.clock.16MHz.bootloader.low_fuses=0xF7

atmega48p_diy.menu.clock.1MHz=1MHz Internal Oscillator
atmega48p_diy.menu.clock.1MHz.build.f_cpu=1000000L
atmega48p_diy.menu.clock.1MHz.bootloader.low_fuses=0x62
atmega48p_diy.menu.clock.1MHz.upload.speed=9600

# Link Time Optimisation
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
atmega48p_diy.menu.lto.enable=LTO Enabled
atmega48p_diy.menu.lto.enable.ltocflags=-flto -fno-fat-lto-objects
atmega48p_diy.menu.lto.enable.ltoelfflags=-g -flto -fuse-linker-plugin
atmega48p_diy.menu.lto.enable.ltocppflags=-flto
atmega48p_diy.menu.lto.enable.ltoarcmd=gcc-
atmega48p_diy.menu.lto.disable=LTO Disabled
atmega48p_diy.menu.lto.disable.ltocflags=
atmega48p_diy.menu.lto.disable.ltoelfflags=
atmega48p_diy.menu.lto.disable.ltocppflags=
atmega48p_diy.menu.lto.disable.ltoarcmd=

# BOD Level Fuse Bits
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
atmega48p_diy.menu.bodlevel.2v7=2.7v
atmega48p_diy.menu.bodlevel.2v7.bootloader.bod_bits=101
atmega48p_diy.menu.bodlevel.disabled=Disabled
atmega48p_diy.menu.bodlevel.disabled.bootloader.bod_bits=111
atmega48p_diy.menu.bodlevel.4v3=4.3v
atmega48p_diy.menu.bodlevel.4v3.bootloader.bod_bits=100
atmega48p_diy.menu.bodlevel.1v8=1.8v
atmega48p_diy.menu.bodlevel.1v8.bootloader.bod_bits=110

# Override: Clock Source Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega48p_diy.menu.advclk.auto=Default

atmega48p_diy.menu.advclk.i8=Internal Oscillator 8 MHz
atmega48p_diy.menu.advclk.i8.bootloader.low_fuses=0xE2
atmega48p_diy.menu.advclk.i8.build.f_cpu=8000000L

atmega48p_diy.menu.advclk.i1=Internal Oscillator 1 MHz
atmega48p_diy.menu.advclk.i1.bootloader.low_fuses=0x62
atmega48p_diy.menu.advclk.i1.build.f_cpu=1000000L

atmega48p_diy.menu.advclk.i128=Internal Oscillator 128 kHz
atmega48p_diy.menu.advclk.i128.bootloader.low_fuses=0xE3
atmega48p_diy.menu.advclk.i128.build.f_cpu=128000L

atmega48p_diy.menu.advclk.xlf=Low Frequency Crystal/Resonator
atmega48p_diy.menu.advclk.xlf.bootloader.low_fuses=0xE5

atmega48p_diy.menu.advclk.xlf=Full Swing Crystal/Resonator 0.4-20 MHz
atmega48p_diy.menu.advclk.xlf.bootloader.low_fuses=0xF7

atmega48p_diy.menu.advclk.x400=Crystal/Resonator 400-900 kHz
atmega48p_diy.menu.advclk.x400.bootloader.low_fuses=0xF9

atmega48p_diy.menu.advclk.x900=Crystal/Resonator 900 kHz - 3 MHz
atmega48p_diy.menu.advclk.x900.bootloader.low_fuses=0xFB

atmega48p_diy.menu.advclk.x3=Crystal/Resonator 3-8 MHz
atmega48p_diy.menu.advclk.x3.bootloader.low_fuses=0xFD

atmega48p_diy.menu.advclk.x8=Crystal/Resonator 8-16 MHz 
atmega48p_diy.menu.advclk.x8.bootloader.low_fuses=0xFF

atmega48p_diy.menu.advclk.xc=External Clock (TCXO, OCXO...)
atmega48p_diy.menu.advclk.xc.bootloader.low_fuses=0xE0

# Override: Frequency Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega48p_diy.menu.advfrq.auto=Default

atmega48p_diy.menu.advfrq.32k768=32.768 kHz
atmega48p_diy.menu.advfrq.32k768.build.f_cpu=32768L
atmega48p_diy.menu.advfrq.32k768.upload.speed=150

atmega48p_diy.menu.advfrq.128k=128 kHz
atmega48p_diy.menu.advfrq.128k.build.f_cpu=128000L
atmega48p_diy.menu.advfrq.128k.upload.speed=300

atmega48p_diy.menu.advfrq.1M=1 MHz
atmega48p_diy.menu.advfrq.1M.build.f_cpu=1000000L
atmega48p_diy.menu.advfrq.1M.upload.speed=9600

atmega48p_diy.menu.advfrq.2M=2 MHz
atmega48p_diy.menu.advfrq.2M.build.f_cpu=2000000L
atmega48p_diy.menu.advfrq.2M.upload.speed=19200

atmega48p_diy.menu.advfrq.4M=4 MHz
atmega48p_diy.menu.advfrq.4M.build.f_cpu=4000000L
atmega48p_diy.menu.advfrq.4M.upload.speed=38400

atmega48p_diy.menu.advfrq.4M608=4.608 MHz
atmega48p_diy.menu.advfrq.4M608.build.f_cpu=4608000L
atmega48p_diy.menu.advfrq.4M608.upload.speed=115200

atmega48p_diy.menu.advfrq.4M8=4.8 MHz
atmega48p_diy.menu.advfrq.4M8.build.f_cpu=4800000L
atmega48p_diy.menu.advfrq.4M8.upload.speed=19200

atmega48p_diy.menu.advfrq.6M=6 MHz
atmega48p_diy.menu.advfrq.6M.build.f_cpu=6000000L
atmega48p_diy.menu.advfrq.6M.upload.speed=57600

atmega48p_diy.menu.advfrq.6M4=6.4 MHz
atmega48p_diy.menu.advfrq.6M4.build.f_cpu=6400000L
atmega48p_diy.menu.advfrq.6M4.upload.speed=115200

atmega48p_diy.menu.advfrq.8M=8 MHz
atmega48p_diy.menu.advfrq.8M.build.f_cpu=8000000L
atmega48p_diy.menu.advfrq.8M.upload.speed=38400

atmega48p_diy.menu.advfrq.9M6=9.6 MHz
atmega48p_diy.menu.advfrq.9M6.build.f_cpu=9600000L
atmega48p_diy.menu.advfrq.9M6.upload.speed=57600

atmega48p_diy.menu.advfrq.10M=10 MHz
atmega48p_diy.menu.advfrq.10M.build.f_cpu=10000000L
atmega48p_diy.menu.advfrq.10M.upload.speed=115200

atmega48p_diy.menu.advfrq.12M=12 MHz
atmega48p_diy.menu.advfrq.12M.build.f_cpu=12000000L
atmega48p_diy.menu.advfrq.12M.upload.speed=115200

atmega48p_diy.menu.advfrq.12M8=12.8 MHz
atmega48p_diy.menu.advfrq.12M8.build.f_cpu=12800000L
atmega48p_diy.menu.advfrq.12M8.upload.speed=115200

atmega48p_diy.menu.advfrq.15M36=15.36 MHz
atmega48p_diy.menu.advfrq.15M36.build.f_cpu=15360000L
atmega48p_diy.menu.advfrq.15M36.upload.speed=57600

atmega48p_diy.menu.advfrq.16M=16 MHz
atmega48p_diy.menu.advfrq.16M.build.f_cpu=16000000L
atmega48p_diy.menu.advfrq.16M.upload.speed=57600

atmega48p_diy.menu.advfrq.19M2=19.2 MHz
atmega48p_diy.menu.advfrq.19M2.build.f_cpu=19200000L
atmega48p_diy.menu.advfrq.19M2.upload.speed=115200

atmega48p_diy.menu.advfrq.20M=20 MHz
atmega48p_diy.menu.advfrq.20M.build.f_cpu=20000000L
atmega48p_diy.menu.advfrq.20M.upload.speed=115200

atmega48p_diy.menu.advfrq.24M=24 MHz
atmega48p_diy.menu.advfrq.24M.build.f_cpu=24000000L
atmega48p_diy.menu.advfrq.24M.upload.speed=115200

# Override: Upload Speed Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega48p_diy.menu.advups.auto=Default

atmega48p_diy.menu.advups.115200=115200
atmega48p_diy.menu.advups.115200.upload.speed=115200

atmega48p_diy.menu.advups.57600=57600
atmega48p_diy.menu.advups.57600.upload.speed=57600

atmega48p_diy.menu.advups.38400=38400
atmega48p_diy.menu.advups.38400.upload.speed=38400

atmega48p_diy.menu.advups.19200=19200
atmega48p_diy.menu.advups.19200.upload.speed=19200

atmega48p_diy.menu.advups.9600=9600
atmega48p_diy.menu.advups.9600.upload.speed=9600

atmega48p_diy.menu.advups.2400=2400
atmega48p_diy.menu.advups.2400.upload.speed=2400

atmega48p_diy.menu.advups.1200=1200
atmega48p_diy.menu.advups.1200.upload.speed=1200

atmega48p_diy.menu.advups.300=300
atmega48p_diy.menu.advups.300.upload.speed=300

atmega48p_diy.menu.advups.150=150
atmega48p_diy.menu.advups.150.upload.speed=150

# }}}


################################################################################
# ATMEGA328(P)
#
# EXTENDED FUSES NOTES
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# avrdude masks out some bits of the extended fuse on read, which would result 
# in verification error of the extended fuse if you give it an unmasked value
#
# The best idea is to use this fuse calculator
#
#     http://www.engbedded.com/fusecalc/ 
#
# which will helpfully tell you in red underneat the AVRDUDE arguments section
# if you should change the fuse, for example if you use that calculator with
# say "F5" for the extended fuse, and ATMega328P selected as the part name,
# then it will tell you "Note that there are some...." and that you  should use 
# "Extended: 0x05" instead.
#
#
# 1.0.5 Compatability Note
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
#  1.0.5 has some minor problems with the non-p ATmega328 (the 328p is fine).
#
#   1: avrdude bundled in the IDE may not know about the non-p 328p signature
#       - characterised by a signature mismatch when you try and burn bootloader
#   2: avr-gcc bundled in the IDE doesn't know about the non-p at all
#       - characterised by the error "atmega328 supported for assembler only"
#
# Problem 1 can be solved by editing avrdude.conf and copying the existing m328p 
# section to make an m328 section, by changing the
#   id to m328
#   desc to ATMEGA328
#   signature to 0x1e 0x95 0x14
# You can then burn a bootloader, easy.
# 
# Problem 2 can be solved in 1 of 2 way, either;
#   a) After solving (1), use the IDE to burn the bootloader for the non-p
#       variant (eg "ATmega328 8MHz Internal Clock"), and then change the
#       selected board in the IDE to the P (eg "ATmega328p 8MHz Internal Clock")
#       variant, from which point on you can upload USING THE BOOTLOADER ONLY
#       this works because of the following reasons - you don't need to know, 
#       just if you are curious, or I want to remind myself...
#
#             i) The optiboot.c bootloader reports the signature to avrdude
#                by outputting the 3 bytes from the defines SIGNATURE_0..2 
#
#            ii) These defines are provided by avr libc from the specific files
#                /usr/lib/avr/include/avr/iom*.h
#
#           iii) The specific file (only one is included ultimately) is included
#                from /usr/lib/avr/include/avr/io.h 
#
#            iv) That file includes the iom328p.h for BOTH the 328 and the 328p
#                and it sets SIGNATURE_0..2 to the 328p bytes regardless.
#
#             v) Thus, optiboot reports the 328p bytes for both 328 and 328p
#
#            vi) Therefore when avrdude asks optiboot for the signature bytes
#                when it is on an atmega328 (non-p) it will give the bytes for 
#                the atmega328p instead, and everybody is happy.
#       
#   b) Instead of solving problem 1 in the correct manner, just change the 
#       signature bytes of the m328p section to 0x1e 0x95 0x14 and then select 
#        the P  board in your IDE (eg "ATmega328p 8MHz Internal Clock"), this 
#        works because now both the IDE and avrdude think your chip is a "p", 
#        which is fine since for your purposes they are identical.
#
################################################################################
# {{{

atmega328_diy.name=ATmega328/P/PB
atmega328_diy.bootloader.low_fuses=0xE2
atmega328_diy.bootloader.high_fuses=0b11011{bootloader.bod_bits}
atmega328_diy.bootloader.bod_bits=101
atmega328_diy.bootloader.extended_fuses=0x05
atmega328_diy.bootloader.unlock_bits=0x3F
atmega328_diy.bootloader.lock_bits=0x3F
atmega328_diy.build.mcu=atmega328p
atmega328_diy.build.f_cpu=8000000L
atmega328_diy.upload.speed=57600
atmega328_diy.build.core=arduino:arduino
atmega328_diy.build.variant=arduino:standard
atmega328_diy.build.board=ATMEGA328_DIY
atmega328_diy.upload.tool=arduino:avrdude
atmega328_diy.bootloader.tool=arduino:avrdude

# Version Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega328_diy.menu.version.atmega328p = Atmega328P
atmega328_diy.menu.version.atmega328p.build.mcu = atmega328p

atmega328_diy.menu.version.atmega328pb = Atmega328PB
atmega328_diy.menu.version.atmega328pb.build.mcu = atmega328pb

atmega328_diy.menu.version.atmega328  = ATmega328
atmega328_diy.menu.version.atmega328.build.mcu = atmega328

# Bootloader Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega328_diy.menu.boot.optiboot=Yes (Normal Arduino Serial/USB Upload)
atmega328_diy.menu.boot.optiboot.upload.protocol=arduino
atmega328_diy.menu.boot.optiboot.upload.maximum_size=32256
atmega328_diy.menu.boot.optiboot.bootloader.high_fuses=0xDE
atmega328_diy.menu.boot.optiboot.bootloader.file=optiboot_{build.mcu}_{build.f_cpu}_{upload.speed}.hex
atmega328_diy.menu.boot.optiboot.bootloader.noblink=notuner_optiboot_{build.mcu}_{build.f_cpu}_{upload.speed}.hex

atmega328_diy.menu.boot.none=No (ISP Programmer Upload)
atmega328_diy.menu.boot.none.upload.maximum_size=32768
atmega328_diy.menu.boot.none.bootloader.high_fuses=0xDF
atmega328_diy.menu.boot.none.upload.tool=arduino:avrdude
atmega328_diy.menu.boot.none.bootloader.tool=avrdude_nobootloader


# Speed Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega328_diy.menu.clock.8MHz=8MHz Internal Oscillator
atmega328_diy.menu.clock.8MHz.build.f_cpu=8000000L
atmega328_diy.menu.clock.8MHz.upload.speed=38400
atmega328_diy.menu.clock.8MHz.bootloader.low_fuses=0xE2

atmega328_diy.menu.clock.20MHz=20MHz Crystal/Resonator
atmega328_diy.menu.clock.20MHz.build.f_cpu=20000000L
atmega328_diy.menu.clock.20MHz.bootloader.low_fuses=0xFF

atmega328_diy.menu.clock.16MHz=16MHz Crystal/Resonator
atmega328_diy.menu.clock.16MHz.build.f_cpu=16000000L
atmega328_diy.menu.clock.16MHz.bootloader.low_fuses=0xFF

atmega328_diy.menu.clock.1MHz=1MHz Internal Oscillator
atmega328_diy.menu.clock.1MHz.build.f_cpu=1000000L
atmega328_diy.menu.clock.1MHz.bootloader.low_fuses=0x62
atmega328_diy.menu.clock.1MHz.upload.speed=9600

# Link Time Optimisation
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
atmega328_diy.menu.lto.enable=LTO Enabled
atmega328_diy.menu.lto.enable.ltocflags=-flto -fno-fat-lto-objects
atmega328_diy.menu.lto.enable.ltoelfflags=-g -flto -fuse-linker-plugin
atmega328_diy.menu.lto.enable.ltocppflags=-flto
atmega328_diy.menu.lto.enable.ltoarcmd=gcc-
atmega328_diy.menu.lto.disable=LTO Disabled
atmega328_diy.menu.lto.disable.ltocflags=
atmega328_diy.menu.lto.disable.ltoelfflags=
atmega328_diy.menu.lto.disable.ltocppflags=
atmega328_diy.menu.lto.disable.ltoarcmd=

# BOD Level Fuse Bits
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
atmega328_diy.menu.bodlevel.2v7=2.7v
atmega328_diy.menu.bodlevel.2v7.bootloader.bod_bits=101
atmega328_diy.menu.bodlevel.disabled=Disabled
atmega328_diy.menu.bodlevel.disabled.bootloader.bod_bits=111
atmega328_diy.menu.bodlevel.4v3=4.3v
atmega328_diy.menu.bodlevel.4v3.bootloader.bod_bits=100
atmega328_diy.menu.bodlevel.1v8=1.8v
atmega328_diy.menu.bodlevel.1v8.bootloader.bod_bits=110

# Override: Clock Source Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega328_diy.menu.advclk.auto=Default

atmega328_diy.menu.advclk.i8=Internal Oscillator 8 MHz
atmega328_diy.menu.advclk.i8.bootloader.low_fuses=0xE2
atmega328_diy.menu.advclk.i8.build.f_cpu=8000000L

atmega328_diy.menu.advclk.i1=Internal Oscillator 1 MHz
atmega328_diy.menu.advclk.i1.bootloader.low_fuses=0x62
atmega328_diy.menu.advclk.i1.build.f_cpu=1000000L

atmega328_diy.menu.advclk.i128=Internal Oscillator 128 kHz
atmega328_diy.menu.advclk.i128.bootloader.low_fuses=0xE3
atmega328_diy.menu.advclk.i128.build.f_cpu=128000L

atmega328_diy.menu.advclk.xlf=Low Frequency Crystal/Resonator
atmega328_diy.menu.advclk.xlf.bootloader.low_fuses=0xE5

atmega328_diy.menu.advclk.xlf=Full Swing Crystal/Resonator 0.4-20 MHz
atmega328_diy.menu.advclk.xlf.bootloader.low_fuses=0xF7

atmega328_diy.menu.advclk.x400=Crystal/Resonator 400-900 kHz
atmega328_diy.menu.advclk.x400.bootloader.low_fuses=0xF9

atmega328_diy.menu.advclk.x900=Crystal/Resonator 900 kHz - 3 MHz
atmega328_diy.menu.advclk.x900.bootloader.low_fuses=0xFB

atmega328_diy.menu.advclk.x3=Crystal/Resonator 3-8 MHz
atmega328_diy.menu.advclk.x3.bootloader.low_fuses=0xFD

atmega328_diy.menu.advclk.x8=Crystal/Resonator 8-16 MHz 
atmega328_diy.menu.advclk.x8.bootloader.low_fuses=0xFF

atmega328_diy.menu.advclk.xc=External Clock (TCXO, OCXO...)
atmega328_diy.menu.advclk.xc.bootloader.low_fuses=0xE0

# Override: Frequency Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega328_diy.menu.advfrq.auto=Default

atmega328_diy.menu.advfrq.32k768=32.768 kHz
atmega328_diy.menu.advfrq.32k768.build.f_cpu=32768L
atmega328_diy.menu.advfrq.32k768.upload.speed=150

atmega328_diy.menu.advfrq.128k=128 kHz
atmega328_diy.menu.advfrq.128k.build.f_cpu=128000L
atmega328_diy.menu.advfrq.128k.upload.speed=300

atmega328_diy.menu.advfrq.1M=1 MHz
atmega328_diy.menu.advfrq.1M.build.f_cpu=1000000L
atmega328_diy.menu.advfrq.1M.upload.speed=9600

atmega328_diy.menu.advfrq.2M=2 MHz
atmega328_diy.menu.advfrq.2M.build.f_cpu=2000000L
atmega328_diy.menu.advfrq.2M.upload.speed=19200

atmega328_diy.menu.advfrq.4M=4 MHz
atmega328_diy.menu.advfrq.4M.build.f_cpu=4000000L
atmega328_diy.menu.advfrq.4M.upload.speed=38400

atmega328_diy.menu.advfrq.4M608=4.608 MHz
atmega328_diy.menu.advfrq.4M608.build.f_cpu=4608000L
atmega328_diy.menu.advfrq.4M608.upload.speed=115200

atmega328_diy.menu.advfrq.4M8=4.8 MHz
atmega328_diy.menu.advfrq.4M8.build.f_cpu=4800000L
atmega328_diy.menu.advfrq.4M8.upload.speed=19200

atmega328_diy.menu.advfrq.6M=6 MHz
atmega328_diy.menu.advfrq.6M.build.f_cpu=6000000L
atmega328_diy.menu.advfrq.6M.upload.speed=57600

atmega328_diy.menu.advfrq.6M4=6.4 MHz
atmega328_diy.menu.advfrq.6M4.build.f_cpu=6400000L
atmega328_diy.menu.advfrq.6M4.upload.speed=115200

atmega328_diy.menu.advfrq.8M=8 MHz
atmega328_diy.menu.advfrq.8M.build.f_cpu=8000000L
atmega328_diy.menu.advfrq.8M.upload.speed=38400

atmega328_diy.menu.advfrq.9M6=9.6 MHz
atmega328_diy.menu.advfrq.9M6.build.f_cpu=9600000L
atmega328_diy.menu.advfrq.9M6.upload.speed=57600

atmega328_diy.menu.advfrq.10M=10 MHz
atmega328_diy.menu.advfrq.10M.build.f_cpu=10000000L
atmega328_diy.menu.advfrq.10M.upload.speed=115200

atmega328_diy.menu.advfrq.12M=12 MHz
atmega328_diy.menu.advfrq.12M.build.f_cpu=12000000L
atmega328_diy.menu.advfrq.12M.upload.speed=115200

atmega328_diy.menu.advfrq.12M8=12.8 MHz
atmega328_diy.menu.advfrq.12M8.build.f_cpu=12800000L
atmega328_diy.menu.advfrq.12M8.upload.speed=115200

atmega328_diy.menu.advfrq.15M36=15.36 MHz
atmega328_diy.menu.advfrq.15M36.build.f_cpu=15360000L
atmega328_diy.menu.advfrq.15M36.upload.speed=57600

atmega328_diy.menu.advfrq.16M=16 MHz
atmega328_diy.menu.advfrq.16M.build.f_cpu=16000000L
atmega328_diy.menu.advfrq.16M.upload.speed=57600

atmega328_diy.menu.advfrq.19M2=19.2 MHz
atmega328_diy.menu.advfrq.19M2.build.f_cpu=19200000L
atmega328_diy.menu.advfrq.19M2.upload.speed=115200

atmega328_diy.menu.advfrq.20M=20 MHz
atmega328_diy.menu.advfrq.20M.build.f_cpu=20000000L
atmega328_diy.menu.advfrq.20M.upload.speed=115200

atmega328_diy.menu.advfrq.24M=24 MHz
atmega328_diy.menu.advfrq.24M.build.f_cpu=24000000L
atmega328_diy.menu.advfrq.24M.upload.speed=115200

# Override: Upload Speed Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega328_diy.menu.advups.auto=Default

atmega328_diy.menu.advups.115200=115200
atmega328_diy.menu.advups.115200.upload.speed=115200

atmega328_diy.menu.advups.57600=57600
atmega328_diy.menu.advups.57600.upload.speed=57600

atmega328_diy.menu.advups.38400=38400
atmega328_diy.menu.advups.38400.upload.speed=38400

atmega328_diy.menu.advups.19200=19200
atmega328_diy.menu.advups.19200.upload.speed=19200

atmega328_diy.menu.advups.9600=9600
atmega328_diy.menu.advups.9600.upload.speed=9600

atmega328_diy.menu.advups.2400=2400
atmega328_diy.menu.advups.2400.upload.speed=2400

atmega328_diy.menu.advups.1200=1200
atmega328_diy.menu.advups.1200.upload.speed=1200

atmega328_diy.menu.advups.300=300
atmega328_diy.menu.advups.300.upload.speed=300

atmega328_diy.menu.advups.150=150
atmega328_diy.menu.advups.150.upload.speed=150

# }}}




################################################################################
# ATMEGA88/A/P/PA/PB
#
# EXTENDED FUSES NOTES
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# avrdude masks out some bits of the extended fuse on read, which would result 
# in verification error of the extended fuse if you give it an unmasked value
#
# The best idea is to use this fuse calculator
#
#     http://www.engbedded.com/fusecalc/ 
#
# which will helpfully tell you in red underneat the AVRDUDE arguments section
# if you should change the fuse, for example if you use that calculator with
# say "F5" for the extended fuse, and ATMega328P selected as the part name,
# then it will tell you "Note that there are some...." and that you  should use 
# "Extended: 0x05" instead.
#
#
################################################################################
# {{{

atmega88_diy.name=ATmega88/A/P/PA/PB
atmega88_diy.bootloader.low_fuses=0xE2
atmega88_diy.bootloader.high_fuses=0b11011{bootloader.bod_bits}
atmega88_diy.bootloader.bod_bits=101
atmega88_diy.bootloader.extended_fuses=0x04
atmega88_diy.bootloader.unlock_bits=0x3F
atmega88_diy.bootloader.lock_bits=0x3F
atmega88_diy.build.mcu=atmega88p
atmega88_diy.build.f_cpu=8000000L
atmega88_diy.upload.speed=57600
atmega88_diy.build.core=arduino:arduino
atmega88_diy.build.variant=arduino:standard
atmega88_diy.build.board=ATMEGA88_DIY
atmega88_diy.upload.tool=arduino:avrdude
atmega88_diy.bootloader.tool=arduino:avrdude

# Version Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega88_diy.menu.version.atmega88p = Atmega88P
atmega88_diy.menu.version.atmega88p.build.mcu = atmega88p

atmega88_diy.menu.version.atmega88pa = Atmega88PA
atmega88_diy.menu.version.atmega88pa.build.mcu = atmega88p

atmega88_diy.menu.version.atmega88pb = Atmega88PB
atmega88_diy.menu.version.atmega88pb.build.mcu = atmega88p

atmega88_diy.menu.version.atmega88  = ATmega88
atmega88_diy.menu.version.atmega88.build.mcu = atmega88

atmega88_diy.menu.version.atmega88a  = ATmega88A
atmega88_diy.menu.version.atmega88a.build.mcu = atmega88

# Bootloader Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega88_diy.menu.boot.optiboot=Yes (Normal Arduino Serial/USB Upload)
atmega88_diy.menu.boot.optiboot.upload.protocol=arduino
atmega88_diy.menu.boot.optiboot.upload.maximum_size=7680
atmega88_diy.menu.boot.optiboot.bootloader.extended_fuses=0x04
atmega88_diy.menu.boot.optiboot.bootloader.file=optiboot_{build.mcu}_{build.f_cpu}_{upload.speed}.hex
atmega88_diy.menu.boot.optiboot.bootloader.noblink=notuner_optiboot_{build.mcu}_{build.f_cpu}_{upload.speed}.hex

atmega88_diy.menu.boot.none=No (ISP Programmer Upload)
atmega88_diy.menu.boot.none.upload.maximum_size=8192
atmega88_diy.menu.boot.none.bootloader.extended_fuses=0x05
atmega88_diy.menu.boot.none.upload.tool=arduino:avrdude
atmega88_diy.menu.boot.none.bootloader.tool=avrdude_nobootloader


# Speed Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega88_diy.menu.clock.8MHz=8MHz Internal Oscillator
atmega88_diy.menu.clock.8MHz.build.f_cpu=8000000L
atmega88_diy.menu.clock.8MHz.upload.speed=38400
atmega88_diy.menu.clock.8MHz.bootloader.low_fuses=0xE2

atmega88_diy.menu.clock.20MHz=20MHz Crystal/Resonator
atmega88_diy.menu.clock.20MHz.build.f_cpu=20000000L
atmega88_diy.menu.clock.20MHz.bootloader.low_fuses=0xFF

atmega88_diy.menu.clock.16MHz=16MHz Crystal/Resonator
atmega88_diy.menu.clock.16MHz.build.f_cpu=16000000L
atmega88_diy.menu.clock.16MHz.bootloader.low_fuses=0xFF

atmega88_diy.menu.clock.1MHz=1MHz Internal Oscillator
atmega88_diy.menu.clock.1MHz.build.f_cpu=1000000L
atmega88_diy.menu.clock.1MHz.bootloader.low_fuses=0x62
atmega88_diy.menu.clock.1MHz.upload.speed=9600


# Link Time Optimisation
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
atmega88_diy.menu.lto.enable=LTO Enabled
atmega88_diy.menu.lto.enable.ltocflags=-flto -fno-fat-lto-objects
atmega88_diy.menu.lto.enable.ltoelfflags=-g -flto -fuse-linker-plugin
atmega88_diy.menu.lto.enable.ltocppflags=-flto
atmega88_diy.menu.lto.enable.ltoarcmd=gcc-
atmega88_diy.menu.lto.disable=LTO Disabled
atmega88_diy.menu.lto.disable.ltocflags=
atmega88_diy.menu.lto.disable.ltoelfflags=
atmega88_diy.menu.lto.disable.ltocppflags=
atmega88_diy.menu.lto.disable.ltoarcmd=

# BOD Level Fuse Bits
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
atmega88_diy.menu.bodlevel.2v7=2.7v
atmega88_diy.menu.bodlevel.2v7.bootloader.bod_bits=101
atmega88_diy.menu.bodlevel.disabled=Disabled
atmega88_diy.menu.bodlevel.disabled.bootloader.bod_bits=111
atmega88_diy.menu.bodlevel.4v3=4.3v
atmega88_diy.menu.bodlevel.4v3.bootloader.bod_bits=100
atmega88_diy.menu.bodlevel.1v8=1.8v
atmega88_diy.menu.bodlevel.1v8.bootloader.bod_bits=110

# Override: Clock Source Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega88_diy.menu.advclk.auto=Default

atmega88_diy.menu.advclk.i8=Internal Oscillator 8 MHz
atmega88_diy.menu.advclk.i8.bootloader.low_fuses=0xE2
atmega88_diy.menu.advclk.i8.build.f_cpu=8000000L

atmega88_diy.menu.advclk.i1=Internal Oscillator 1 MHz
atmega88_diy.menu.advclk.i1.bootloader.low_fuses=0x62
atmega88_diy.menu.advclk.i1.build.f_cpu=1000000L

atmega88_diy.menu.advclk.i128=Internal Oscillator 128 kHz
atmega88_diy.menu.advclk.i128.bootloader.low_fuses=0xE3
atmega88_diy.menu.advclk.i128.build.f_cpu=128000L

atmega88_diy.menu.advclk.xlf=Low Frequency Crystal/Resonator
atmega88_diy.menu.advclk.xlf.bootloader.low_fuses=0xE5

atmega88_diy.menu.advclk.xlf=Full Swing Crystal/Resonator 0.4-20 MHz
atmega88_diy.menu.advclk.xlf.bootloader.low_fuses=0xF7

atmega88_diy.menu.advclk.x400=Crystal/Resonator 400-900 kHz
atmega88_diy.menu.advclk.x400.bootloader.low_fuses=0xF9

atmega88_diy.menu.advclk.x900=Crystal/Resonator 900 kHz - 3 MHz
atmega88_diy.menu.advclk.x900.bootloader.low_fuses=0xFB

atmega88_diy.menu.advclk.x3=Crystal/Resonator 3-8 MHz
atmega88_diy.menu.advclk.x3.bootloader.low_fuses=0xFD

atmega88_diy.menu.advclk.x8=Crystal/Resonator 8-16 MHz 
atmega88_diy.menu.advclk.x8.bootloader.low_fuses=0xFF

atmega88_diy.menu.advclk.xc=External Clock (TCXO, OCXO...)
atmega88_diy.menu.advclk.xc.bootloader.low_fuses=0xE0

# Override: Frequency Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega88_diy.menu.advfrq.auto=Default

atmega88_diy.menu.advfrq.32k768=32.768 kHz
atmega88_diy.menu.advfrq.32k768.build.f_cpu=32768L
atmega88_diy.menu.advfrq.32k768.upload.speed=150

atmega88_diy.menu.advfrq.128k=128 kHz
atmega88_diy.menu.advfrq.128k.build.f_cpu=128000L
atmega88_diy.menu.advfrq.128k.upload.speed=300

atmega88_diy.menu.advfrq.1M=1 MHz
atmega88_diy.menu.advfrq.1M.build.f_cpu=1000000L
atmega88_diy.menu.advfrq.1M.upload.speed=9600

atmega88_diy.menu.advfrq.2M=2 MHz
atmega88_diy.menu.advfrq.2M.build.f_cpu=2000000L
atmega88_diy.menu.advfrq.2M.upload.speed=19200

atmega88_diy.menu.advfrq.4M=4 MHz
atmega88_diy.menu.advfrq.4M.build.f_cpu=4000000L
atmega88_diy.menu.advfrq.4M.upload.speed=38400

atmega88_diy.menu.advfrq.4M608=4.608 MHz
atmega88_diy.menu.advfrq.4M608.build.f_cpu=4608000L
atmega88_diy.menu.advfrq.4M608.upload.speed=115200

atmega88_diy.menu.advfrq.4M8=4.8 MHz
atmega88_diy.menu.advfrq.4M8.build.f_cpu=4800000L
atmega88_diy.menu.advfrq.4M8.upload.speed=19200

atmega88_diy.menu.advfrq.6M=6 MHz
atmega88_diy.menu.advfrq.6M.build.f_cpu=6000000L
atmega88_diy.menu.advfrq.6M.upload.speed=57600

atmega88_diy.menu.advfrq.6M4=6.4 MHz
atmega88_diy.menu.advfrq.6M4.build.f_cpu=6400000L
atmega88_diy.menu.advfrq.6M4.upload.speed=115200

atmega88_diy.menu.advfrq.8M=8 MHz
atmega88_diy.menu.advfrq.8M.build.f_cpu=8000000L
atmega88_diy.menu.advfrq.8M.upload.speed=38400

atmega88_diy.menu.advfrq.9M6=9.6 MHz
atmega88_diy.menu.advfrq.9M6.build.f_cpu=9600000L
atmega88_diy.menu.advfrq.9M6.upload.speed=57600

atmega88_diy.menu.advfrq.10M=10 MHz
atmega88_diy.menu.advfrq.10M.build.f_cpu=10000000L
atmega88_diy.menu.advfrq.10M.upload.speed=115200

atmega88_diy.menu.advfrq.12M=12 MHz
atmega88_diy.menu.advfrq.12M.build.f_cpu=12000000L
atmega88_diy.menu.advfrq.12M.upload.speed=115200

atmega88_diy.menu.advfrq.12M8=12.8 MHz
atmega88_diy.menu.advfrq.12M8.build.f_cpu=12800000L
atmega88_diy.menu.advfrq.12M8.upload.speed=115200

atmega88_diy.menu.advfrq.15M36=15.36 MHz
atmega88_diy.menu.advfrq.15M36.build.f_cpu=15360000L
atmega88_diy.menu.advfrq.15M36.upload.speed=57600

atmega88_diy.menu.advfrq.16M=16 MHz
atmega88_diy.menu.advfrq.16M.build.f_cpu=16000000L
atmega88_diy.menu.advfrq.16M.upload.speed=57600

atmega88_diy.menu.advfrq.19M2=19.2 MHz
atmega88_diy.menu.advfrq.19M2.build.f_cpu=19200000L
atmega88_diy.menu.advfrq.19M2.upload.speed=115200

atmega88_diy.menu.advfrq.20M=20 MHz
atmega88_diy.menu.advfrq.20M.build.f_cpu=20000000L
atmega88_diy.menu.advfrq.20M.upload.speed=115200

atmega88_diy.menu.advfrq.24M=24 MHz
atmega88_diy.menu.advfrq.24M.build.f_cpu=24000000L
atmega88_diy.menu.advfrq.24M.upload.speed=115200

# Override: Upload Speed Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega88_diy.menu.advups.auto=Default

atmega88_diy.menu.advups.115200=115200
atmega88_diy.menu.advups.115200.upload.speed=115200

atmega88_diy.menu.advups.57600=57600
atmega88_diy.menu.advups.57600.upload.speed=57600

atmega88_diy.menu.advups.38400=38400
atmega88_diy.menu.advups.38400.upload.speed=38400

atmega88_diy.menu.advups.19200=19200
atmega88_diy.menu.advups.19200.upload.speed=19200

atmega88_diy.menu.advups.9600=9600
atmega88_diy.menu.advups.9600.upload.speed=9600

atmega88_diy.menu.advups.2400=2400
atmega88_diy.menu.advups.2400.upload.speed=2400

atmega88_diy.menu.advups.1200=1200
atmega88_diy.menu.advups.1200.upload.speed=1200

atmega88_diy.menu.advups.300=300
atmega88_diy.menu.advups.300.upload.speed=300

atmega88_diy.menu.advups.150=150
atmega88_diy.menu.advups.150.upload.speed=150

# }}}




################################################################################
# ATMEGA168/A/P/PA/PB
#
# EXTENDED FUSES NOTES
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# avrdude masks out some bits of the extended fuse on read, which would result 
# in verification error of the extended fuse if you give it an unmasked value
#
# The best idea is to use this fuse calculator
#
#     http://www.engbedded.com/fusecalc/ 
#
# which will helpfully tell you in red underneat the AVRDUDE arguments section
# if you should change the fuse, for example if you use that calculator with
# say "F5" for the extended fuse, and ATMega328P selected as the part name,
# then it will tell you "Note that there are some...." and that you  should use 
# "Extended: 0x05" instead.
#
################################################################################
# {{{

atmega168_diy.name=ATmega168/A/P/PA/PB
atmega168_diy.bootloader.low_fuses=0xE2
atmega168_diy.bootloader.high_fuses=0b11011{bootloader.bod_bits}
atmega168_diy.bootloader.bod_bits=101
atmega168_diy.bootloader.extended_fuses=0x04
atmega168_diy.bootloader.unlock_bits=0x3F
atmega168_diy.bootloader.lock_bits=0x3F
atmega168_diy.build.mcu=atmega168p
atmega168_diy.build.f_cpu=8000000L
atmega168_diy.upload.speed=57600
atmega168_diy.build.core=arduino:arduino
atmega168_diy.build.variant=arduino:standard
atmega168_diy.build.board=ATMEGA168_DIY
atmega168_diy.upload.tool=arduino:avrdude
atmega168_diy.bootloader.tool=arduino:avrdude

# Version Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega168_diy.menu.version.atmega168p = Atmega168P
atmega168_diy.menu.version.atmega168p.build.mcu = atmega168p

atmega168_diy.menu.version.atmega168pa = Atmega168PA
atmega168_diy.menu.version.atmega168pa.build.mcu = atmega168p

atmega168_diy.menu.version.atmega168pb = Atmega168PB
atmega168_diy.menu.version.atmega168pb.build.mcu = atmega168p

atmega168_diy.menu.version.atmega168  = ATmega168
atmega168_diy.menu.version.atmega168.build.mcu = atmega168

atmega168_diy.menu.version.atmega168a  = ATmega168A
atmega168_diy.menu.version.atmega168a.build.mcu = atmega168

# Bootloader Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega168_diy.menu.boot.optiboot=Yes (Normal Arduino Serial/USB Upload)
atmega168_diy.menu.boot.optiboot.upload.protocol=arduino
atmega168_diy.menu.boot.optiboot.upload.maximum_size=15872
atmega168_diy.menu.boot.optiboot.bootloader.extended_fuses=0x04
atmega168_diy.menu.boot.optiboot.bootloader.file=optiboot_{build.mcu}_{build.f_cpu}_{upload.speed}.hex
atmega168_diy.menu.boot.optiboot.bootloader.noblink=notuner_optiboot_{build.mcu}_{build.f_cpu}_{upload.speed}.hex

atmega168_diy.menu.boot.none=No (ISP Programmer Upload)
atmega168_diy.menu.boot.none.upload.maximum_size=16384
atmega168_diy.menu.boot.none.bootloader.extended_fuses=0x05
atmega168_diy.menu.boot.none.upload.tool=arduino:avrdude
atmega168_diy.menu.boot.none.bootloader.tool=avrdude_nobootloader


# Speed Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega168_diy.menu.clock.8MHz=8MHz Internal Oscillator
atmega168_diy.menu.clock.8MHz.build.f_cpu=8000000L
atmega168_diy.menu.clock.8MHz.upload.speed=38400
atmega168_diy.menu.clock.8MHz.bootloader.low_fuses=0xE2

atmega168_diy.menu.clock.20MHz=20MHz Crystal/Resonator
atmega168_diy.menu.clock.20MHz.build.f_cpu=20000000L
atmega168_diy.menu.clock.20MHz.bootloader.low_fuses=0xFF

atmega168_diy.menu.clock.16MHz=16MHz Crystal/Resonator
atmega168_diy.menu.clock.16MHz.build.f_cpu=16000000L
atmega168_diy.menu.clock.16MHz.bootloader.low_fuses=0xFF

atmega168_diy.menu.clock.1MHz=1MHz Internal Oscillator
atmega168_diy.menu.clock.1MHz.build.f_cpu=1000000L
atmega168_diy.menu.clock.1MHz.bootloader.low_fuses=0x62
atmega168_diy.menu.clock.1MHz.upload.speed=9600

# Link Time Optimisation
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
atmega168_diy.menu.lto.enable=LTO Enabled
atmega168_diy.menu.lto.enable.ltocflags=-flto -fno-fat-lto-objects
atmega168_diy.menu.lto.enable.ltoelfflags=-g -flto -fuse-linker-plugin
atmega168_diy.menu.lto.enable.ltocppflags=-flto
atmega168_diy.menu.lto.enable.ltoarcmd=gcc-
atmega168_diy.menu.lto.disable=LTO Disabled
atmega168_diy.menu.lto.disable.ltocflags=
atmega168_diy.menu.lto.disable.ltoelfflags=
atmega168_diy.menu.lto.disable.ltocppflags=
atmega168_diy.menu.lto.disable.ltoarcmd=

# BOD Level Fuse Bits
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
atmega168_diy.menu.bodlevel.2v7=2.7v
atmega168_diy.menu.bodlevel.2v7.bootloader.bod_bits=101
atmega168_diy.menu.bodlevel.disabled=Disabled
atmega168_diy.menu.bodlevel.disabled.bootloader.bod_bits=111
atmega168_diy.menu.bodlevel.4v3=4.3v
atmega168_diy.menu.bodlevel.4v3.bootloader.bod_bits=100
atmega168_diy.menu.bodlevel.1v8=1.8v
atmega168_diy.menu.bodlevel.1v8.bootloader.bod_bits=110

# Override: Clock Source Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega168_diy.menu.advclk.auto=Default

atmega168_diy.menu.advclk.i8=Internal Oscillator 8 MHz
atmega168_diy.menu.advclk.i8.bootloader.low_fuses=0xE2
atmega168_diy.menu.advclk.i8.build.f_cpu=8000000L

atmega168_diy.menu.advclk.i1=Internal Oscillator 1 MHz
atmega168_diy.menu.advclk.i1.bootloader.low_fuses=0x62
atmega168_diy.menu.advclk.i1.build.f_cpu=1000000L

atmega168_diy.menu.advclk.i128=Internal Oscillator 128 kHz
atmega168_diy.menu.advclk.i128.bootloader.low_fuses=0xE3
atmega168_diy.menu.advclk.i128.build.f_cpu=128000L

atmega168_diy.menu.advclk.xlf=Low Frequency Crystal/Resonator
atmega168_diy.menu.advclk.xlf.bootloader.low_fuses=0xE5

atmega168_diy.menu.advclk.xlf=Full Swing Crystal/Resonator 0.4-20 MHz
atmega168_diy.menu.advclk.xlf.bootloader.low_fuses=0xF7

atmega168_diy.menu.advclk.x400=Crystal/Resonator 400-900 kHz
atmega168_diy.menu.advclk.x400.bootloader.low_fuses=0xF9

atmega168_diy.menu.advclk.x900=Crystal/Resonator 900 kHz - 3 MHz
atmega168_diy.menu.advclk.x900.bootloader.low_fuses=0xFB

atmega168_diy.menu.advclk.x3=Crystal/Resonator 3-8 MHz
atmega168_diy.menu.advclk.x3.bootloader.low_fuses=0xFD

atmega168_diy.menu.advclk.x8=Crystal/Resonator 8-16 MHz 
atmega168_diy.menu.advclk.x8.bootloader.low_fuses=0xFF

atmega168_diy.menu.advclk.xc=External Clock (TCXO, OCXO...)
atmega168_diy.menu.advclk.xc.bootloader.low_fuses=0xE0

# Override: Frequency Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega168_diy.menu.advfrq.auto=Default

atmega168_diy.menu.advfrq.32k768=32.768 kHz
atmega168_diy.menu.advfrq.32k768.build.f_cpu=32768L
atmega168_diy.menu.advfrq.32k768.upload.speed=150

atmega168_diy.menu.advfrq.128k=128 kHz
atmega168_diy.menu.advfrq.128k.build.f_cpu=128000L
atmega168_diy.menu.advfrq.128k.upload.speed=300

atmega168_diy.menu.advfrq.1M=1 MHz
atmega168_diy.menu.advfrq.1M.build.f_cpu=1000000L
atmega168_diy.menu.advfrq.1M.upload.speed=9600

atmega168_diy.menu.advfrq.2M=2 MHz
atmega168_diy.menu.advfrq.2M.build.f_cpu=2000000L
atmega168_diy.menu.advfrq.2M.upload.speed=19200

atmega168_diy.menu.advfrq.4M=4 MHz
atmega168_diy.menu.advfrq.4M.build.f_cpu=4000000L
atmega168_diy.menu.advfrq.4M.upload.speed=38400

atmega168_diy.menu.advfrq.4M608=4.608 MHz
atmega168_diy.menu.advfrq.4M608.build.f_cpu=4608000L
atmega168_diy.menu.advfrq.4M608.upload.speed=115200

atmega168_diy.menu.advfrq.4M8=4.8 MHz
atmega168_diy.menu.advfrq.4M8.build.f_cpu=4800000L
atmega168_diy.menu.advfrq.4M8.upload.speed=19200

atmega168_diy.menu.advfrq.6M=6 MHz
atmega168_diy.menu.advfrq.6M.build.f_cpu=6000000L
atmega168_diy.menu.advfrq.6M.upload.speed=57600

atmega168_diy.menu.advfrq.6M4=6.4 MHz
atmega168_diy.menu.advfrq.6M4.build.f_cpu=6400000L
atmega168_diy.menu.advfrq.6M4.upload.speed=115200

atmega168_diy.menu.advfrq.8M=8 MHz
atmega168_diy.menu.advfrq.8M.build.f_cpu=8000000L
atmega168_diy.menu.advfrq.8M.upload.speed=38400

atmega168_diy.menu.advfrq.9M6=9.6 MHz
atmega168_diy.menu.advfrq.9M6.build.f_cpu=9600000L
atmega168_diy.menu.advfrq.9M6.upload.speed=57600

atmega168_diy.menu.advfrq.10M=10 MHz
atmega168_diy.menu.advfrq.10M.build.f_cpu=10000000L
atmega168_diy.menu.advfrq.10M.upload.speed=115200

atmega168_diy.menu.advfrq.12M=12 MHz
atmega168_diy.menu.advfrq.12M.build.f_cpu=12000000L
atmega168_diy.menu.advfrq.12M.upload.speed=115200

atmega168_diy.menu.advfrq.12M8=12.8 MHz
atmega168_diy.menu.advfrq.12M8.build.f_cpu=12800000L
atmega168_diy.menu.advfrq.12M8.upload.speed=115200

atmega168_diy.menu.advfrq.15M36=15.36 MHz
atmega168_diy.menu.advfrq.15M36.build.f_cpu=15360000L
atmega168_diy.menu.advfrq.15M36.upload.speed=57600

atmega168_diy.menu.advfrq.16M=16 MHz
atmega168_diy.menu.advfrq.16M.build.f_cpu=16000000L
atmega168_diy.menu.advfrq.16M.upload.speed=57600

atmega168_diy.menu.advfrq.19M2=19.2 MHz
atmega168_diy.menu.advfrq.19M2.build.f_cpu=19200000L
atmega168_diy.menu.advfrq.19M2.upload.speed=115200

atmega168_diy.menu.advfrq.20M=20 MHz
atmega168_diy.menu.advfrq.20M.build.f_cpu=20000000L
atmega168_diy.menu.advfrq.20M.upload.speed=115200

atmega168_diy.menu.advfrq.24M=24 MHz
atmega168_diy.menu.advfrq.24M.build.f_cpu=24000000L
atmega168_diy.menu.advfrq.24M.upload.speed=115200

# Override: Upload Speed Menu
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

atmega168_diy.menu.advups.auto=Default

atmega168_diy.menu.advups.115200=115200
atmega168_diy.menu.advups.115200.upload.speed=115200

atmega168_diy.menu.advups.57600=57600
atmega168_diy.menu.advups.57600.upload.speed=57600

atmega168_diy.menu.advups.38400=38400
atmega168_diy.menu.advups.38400.upload.speed=38400

atmega168_diy.menu.advups.19200=19200
atmega168_diy.menu.advups.19200.upload.speed=19200

atmega168_diy.menu.advups.9600=9600
atmega168_diy.menu.advups.9600.upload.speed=9600

atmega168_diy.menu.advups.2400=2400
atmega168_diy.menu.advups.2400.upload.speed=2400

atmega168_diy.menu.advups.1200=1200
atmega168_diy.menu.advups.1200.upload.speed=1200

atmega168_diy.menu.advups.300=300
atmega168_diy.menu.advups.300.upload.speed=300

atmega168_diy.menu.advups.150=150
atmega168_diy.menu.advups.150.upload.speed=150

# }}}

